import {Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, OneToOne, PrimaryGeneratedColumn} from 'typeorm'
import {IsIn, IsNotEmpty, IsOptional, IsPhoneNumber, Length, Matches, MaxLength, Min} from 'class-validator'
import {User} from "./User";

const genderArray = ["Male","Female", "Non-binary", "Other"]

const classArray = [
    'Barbarian', 'Bard',
    'Cleric', 'Druid',
    'Fighter', 'Monk',
    'Paladin', 'Ranger',
    'Rogue', 'Sorcerer',
    'Warlock', 'Wizard',
]

const raceArray = [
    'Dragonborn', 'Dwarf', 'Elf',
    'Gnome', 'Half-Elf', 'Half-Orc',
    'Halfling', 'Human', 'Tiefling',
]

const alignmentArray = [
    'Lawful Good', 'Neutral Good', 'Chaotic Good',
    'Lawful Neutral', 'True Neutral', 'Chaotic Neutral',
    'Lawful Evil', 'Neutral Evil', 'Chaotic Evil',
]

@Entity()
export class Character {
    @PrimaryGeneratedColumn()
    @IsOptional()
    id: number

    @Column({ type: 'varchar', length: 50, nullable: false })
    @Length(1, 50, { message: 'Name must be from $constraint1 to $constraint2 characters ' })
    @IsNotEmpty({ message: 'Name is Required' })
    name: string

    @Column({ type: 'integer', nullable: false })
    @Min(0, { message: 'Age must be at least 0' })
    @IsNotEmpty({ message: 'Age is Required' })
    age: number

    @Column({ type: 'varchar', length: 50, nullable: false })
    @IsIn(["Male","Female", "Non-binary", "Other"], { message: 'Please choose between the options: ' + genderArray.toString() })
    @IsNotEmpty({ message: 'Gender is Required' })
    gender: string

    @Column({ type: 'varchar', length: 50, nullable: false })
    @IsNotEmpty({ message: 'Class is Required' })
    @IsIn(classArray, { message: 'Please choose between the options: ' + classArray.toString() })
    class: string

    @Column({ type: 'varchar', length: 50, nullable: false })
    @IsNotEmpty({ message: 'Race is Required' })
    @IsIn(raceArray, { message: 'Please choose between the options: ' + raceArray.toString() })
    race: string;

    @Column({ type: 'varchar', length: 20, nullable: false })
    @IsNotEmpty({ message: 'Alignment is Required' })
    @IsIn(alignmentArray, { message: 'Please choose between the options: ' + alignmentArray.toString() })
    alignment: string;

    @Column({ type: 'varchar', length: 255, nullable: true })
    @IsOptional()
    @IsNotEmpty({ message: 'Description is required if provided' }) // to prevent just sending an empty string
    description: string;



    //could implement stats with FK, currently not implementing stats

    //autogenerated column when the character is created
    @CreateDateColumn({ type: 'datetime', default: () => 'CURRENT_TIMESTAMP' })
    dateCreated: Date;

    @ManyToOne(() => User, (user) => user.characters, { nullable: true })
    @JoinColumn({ name: 'user_id' }) // specifies the foreign key column name
    @IsOptional()
    user: User;
}
